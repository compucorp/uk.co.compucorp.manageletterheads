<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from /var/www/site2/profiles/compuclient/modules/contrib/civicrm/ext/uk.co.compucorp.manageletterheads/xml/schema/CRM/ManageLetterheads/LetterheadAvailability.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:7aa884fff7ec3606c41adcb49057f81c)
 */

/**
 * Database access object for the LetterheadAvailability entity.
 */
class CRM_ManageLetterheads_DAO_LetterheadAvailability extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_manageletterheads_letterhead_availability';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique LetterheadAvailability ID
   *
   * @var int
   */
  public $id;

  /**
   * One of the values of the manageletterheads_available_for option group
   *
   * @var string
   */
  public $available_for;

  /**
   * FK to Letterhead
   *
   * @var int
   */
  public $letterhead_id;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_manageletterheads_letterhead_availability';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   */
  public static function getEntityTitle() {
    return ts('Letterhead Availabilities');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'letterhead_id', 'civicrm_manageletterheads_letterhead', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => CRM_ManageLetterheads_ExtensionUtil::ts('Unique LetterheadAvailability ID'),
          'required' => TRUE,
          'where' => 'civicrm_manageletterheads_letterhead_availability.id',
          'table_name' => 'civicrm_manageletterheads_letterhead_availability',
          'entity' => 'LetterheadAvailability',
          'bao' => 'CRM_ManageLetterheads_DAO_LetterheadAvailability',
          'localizable' => 0,
          'add' => NULL,
        ],
        'available_for' => [
          'name' => 'available_for',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_ManageLetterheads_ExtensionUtil::ts('Available For'),
          'description' => CRM_ManageLetterheads_ExtensionUtil::ts('One of the values of the manageletterheads_available_for option group'),
          'required' => TRUE,
          'maxlength' => 30,
          'size' => CRM_Utils_Type::MEDIUM,
          'where' => 'civicrm_manageletterheads_letterhead_availability.available_for',
          'table_name' => 'civicrm_manageletterheads_letterhead_availability',
          'entity' => 'LetterheadAvailability',
          'bao' => 'CRM_ManageLetterheads_DAO_LetterheadAvailability',
          'localizable' => 0,
          'pseudoconstant' => [
            'optionGroupName' => 'manageletterheads_available_for',
            'optionEditPath' => 'civicrm/admin/options/manageletterheads_available_for',
          ],
          'add' => NULL,
        ],
        'letterhead_id' => [
          'name' => 'letterhead_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => CRM_ManageLetterheads_ExtensionUtil::ts('Letterhead ID'),
          'description' => CRM_ManageLetterheads_ExtensionUtil::ts('FK to Letterhead'),
          'required' => TRUE,
          'where' => 'civicrm_manageletterheads_letterhead_availability.letterhead_id',
          'table_name' => 'civicrm_manageletterheads_letterhead_availability',
          'entity' => 'LetterheadAvailability',
          'bao' => 'CRM_ManageLetterheads_DAO_LetterheadAvailability',
          'localizable' => 0,
          'FKClassName' => 'CRM_ManageLetterheads_DAO_Letterhead',
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'manageletterheads_letterhead_availability', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'manageletterheads_letterhead_availability', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
